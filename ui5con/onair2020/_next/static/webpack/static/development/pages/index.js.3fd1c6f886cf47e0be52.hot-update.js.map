{"version":3,"file":"static/webpack/static/development/pages/index.js.3fd1c6f886cf47e0be52.hot-update.js","sources":["webpack:///./src/components/agenda/index.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport cx from 'classnames';\nimport styleModule from \"./Agenda.module.css\";\n\nimport Dialog from '../dialog';\nimport Section from \"../section\";\nimport Title from \"../title\";\nimport Avatar from \"../avatar\";\nimport ToggleButtons from \"../toggleButton\";\nimport AgendaSession from \"./Session\";\nimport SessionIcon from \"./SessionIcon\";\n\nconst AgendaJSON = require('../../../data/agenda.json')\n    .map((s) => {\n        let startTime = new Date(s.startTime.replace( /(\\d{2}).(\\d{2}).(\\d{4})/, \"$2/$1/$3\"));\n        let endTime = new Date(s.endTime.replace( /(\\d{2}).(\\d{2}).(\\d{4})/, \"$2/$1/$3\"));\n        s.startTime = startTime;\n        s.endTime = endTime;\n        return s;\n    })\n    .sort((s1, s2) => s1.startTime - s2.startTime);\n\nconst venueTimeFormatter = new Intl.DateTimeFormat(undefined, {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hourCycle: \"h23\",\n    timeZone: \"Europe/Berlin\"\n});\nconst userTimeFormatter = new Intl.DateTimeFormat(undefined, {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hourCycle: \"h23\",\n});\n\n\nconst fnGetSession = (bUserTime, selectedDate) => {\n   return AgendaJSON\n        .filter((s) => {\n            let relatedDate = bUserTime ? s.startTime.getDate() : s.startTime.getUTCDate();\n            return relatedDate === selectedDate\n        })\n        .sort((s1, s2) => s1.startTime - s2.startTime)\n}\n\nconst getDateButtonState = (bUserTime, selectedKey) => {\n    let firstSessionTime = AgendaJSON[0].startTime\n    let lastSessionTime = AgendaJSON[AgendaJSON.length - 1].startTime\n    if (bUserTime && firstSessionTime.getDate() === lastSessionTime.getDate()) {\n        return {\n            selectedKey: firstSessionTime.getDate(),\n            buttons: [{\n                key: firstSessionTime.getDate(),\n                title: \"Day 1\",\n                subtitle: `JUL ${firstSessionTime.getDate()}`\n            }]\n        }\n    } else {\n        return {\n            selectedKey: selectedKey !== undefined ? selectedKey : Date.now() > (bUserTime ? new Date(2020, 6, 10) : Date.UTC(2020, 6, 10, 2)) ? 10 : 9,\n            buttons: [{\n                key: 9,\n                title: \"Day 1\",\n                subtitle: \"JUL 9\"\n            }, {\n                key: 10,\n                title: \"Day 2\",\n                subtitle: \"JUL 10\"\n            }]\n        }\n    }\n\n}\n\n\n\nconst Agenda = () => {\n    let userOffest = new Date().getTimezoneOffset() / -60\n    const timeButtons = [{\n        key: \"venueTime\",\n        title: \"Venue time\",\n        subtitle: \"(UTC+2)\"\n    }, {\n        key: \"userTime\",\n        title: \"Your time\",\n        subtitle: `(UTC${userOffest < 0 ? \"\" : \"+\"}${userOffest})`\n    }]\n    let timeSettings = \"userTime\";\n    useEffect(() => {\n        if (localStorage && localStorage.getItem && localStorage.getItem(\"userSelection\")) {\n            fnUpdateSelectedTime(localStorage.getItem(\"userSelection\"), true);\n        }\n    }, [])\n\n    let bUserTime = timeSettings === \"userTime\";\n    const [selectedTime, setSelectedTime] = useState(timeSettings);\n\n    const [dateButton, setDateButton] = useState(getDateButtonState(bUserTime));\n    const [sessions, setSessions] = useState(fnGetSession(bUserTime, dateButton.selectedKey));\n    const [selectedSession, setSelectedSession] = useState(null);\n\n    const fnUpdateSelectedTime = (key, bResetDate) => {\n        if (localStorage && localStorage.setItem) {\n            localStorage.setItem(\"userSelection\", key);\n        }\n        setSelectedTime(key);\n        const newDateButtonState = getDateButtonState(key === \"userTime\", bResetDate ? undefined : dateButton.selectedKey)\n        setDateButton(newDateButtonState)\n        setSessions(fnGetSession(key === \"userTime\", newDateButtonState.selectedKey))\n    }\n\n    const fnUpdateSelectedDay = (key) => {\n        setDateButton({\n            ...dateButton,\n            selectedKey: key\n        });\n        setSessions(fnGetSession(selectedTime === \"userTime\", key))\n    }\n\n    return (\n        <Section cssClass={styleModule.Agenda}>\n            <div id=\"agenda\" className={styleModule.agenda__title}>\n                <Title color=\"white\" size=\"medium\" text=\"Agenda\" />\n                <ToggleButtons buttons={timeButtons} selectedKey={selectedTime} onClick={fnUpdateSelectedTime} verticalAlign={true}/>\n            </div>\n            <div className={styleModule.agenda__dayToggle}>\n                <ToggleButtons buttons={dateButton.buttons} selectedKey={dateButton.selectedKey} onClick={fnUpdateSelectedDay}/>\n            </div>\n            { sessions.map((session, index) => (\n                <div\n                    key={index}\n                    className={cx(\n                        styleModule.AgendaItem,\n                        session.type === 'break' ? styleModule.view_break : null,\n                    )}\n                >\n                    <div className={styleModule.agenda__startTime}>\n                        {selectedTime === \"venueTime\" ? venueTimeFormatter.format(session.startTime) : userTimeFormatter.format(session.startTime)}\n                    </div>\n                    <div className={styleModule.AgendaAvatars}>\n                        {\n                            session.type === 'break' || session.type === 'pre_event'\n                                ? (\n                                    <SessionIcon type={session.type} />\n                                )\n                                : (\n                                    session.speakers.map((speaker, speakerIndex) => (\n                                        <Avatar\n                                            onClick={() => setSelectedSession(session)}\n                                            key={speakerIndex}\n                                            src={speaker.photoUrl}\n                                            alt={`${speaker.firstName} ${speaker.lastName}`}\n                                        />\n                                    ))\n                                )\n                        }\n                    </div>\n                    <div className={styleModule.agenda__desctiption}>\n                        <AgendaSession session={session} full={false} onClick={session.type !== 'break' ? () => setSelectedSession(session) : null}/>\n                    </div>\n                </div>\n            ))}\n            { selectedSession\n                ? (\n                    <Dialog isOpen={true} onClose={() => setSelectedSession(null)}>\n                        <AgendaSession session={selectedSession}/>\n                    </Dialog>\n                )\n                : null\n            }\n        </Section>\n    );\n}\n\n\n\nexport default Agenda;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AANA;AAYA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAnBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAwBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA9BA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAGA;;;;A","sourceRoot":""}